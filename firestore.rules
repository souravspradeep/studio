/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and a public-read, owner-write model for lost and found items.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Only the authenticated user can read or write their own profile.
 * - /lostItems/{lostItemId}: Stores lost item posts. These are publicly readable, but only the owner can create, update, or delete them.
 * - /foundItems/{foundItemId}: Stores found item posts. These are publicly readable, but only the owner can create, update, or delete them.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data shape validation is relaxed to allow for rapid prototyping. Only authorization-critical fields are validated.
 * - Ownership is determined by the `ownerId` field on item documents and the `userId` path for user profiles.
 * - Public read access is granted to the `lostItems` and `foundItems` collections.
 *
 * Denormalization for Authorization:
 * - The `lostItems` and `foundItems` collections depend on denormalized `ownerId` field on each document. This simplifies the rules and avoids costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile at /users/user123.
     * @allow (get) User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) User with UID 'user456' cannot read the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to lost item posts.
     * @path /lostItems/{lostItemId}
     * @allow (get) Any user can read a lost item post.
     * @allow (list) Any user can list lost item posts.
     * @allow (create) User with UID 'user123' can create a lost item post with ownerId 'user123'.
     * @allow (update) User with UID 'user123' can update a lost item post they own (ownerId 'user123').
     * @allow (delete) User with UID 'user123' can delete a lost item post they own (ownerId 'user123').
     * @deny (create) User with UID 'user456' cannot create a lost item post with ownerId 'user123'.
     * @deny (update) User with UID 'user456' cannot update a lost item post owned by 'user123'.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /lostItems/{lostItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to found item posts.
     * @path /foundItems/{foundItemId}
     * @allow (get) Any user can read a found item post.
     * @allow (list) Any user can list found item posts.
     * @allow (create) User with UID 'user123' can create a found item post with ownerId 'user123'.
     * @allow (update) User with UID 'user123' can update a found item post they own (ownerId 'user123').
     * @allow (delete) User with UID 'user123' can delete a found item post they own (ownerId 'user123').
     * @deny (create) User with UID 'user456' cannot create a found item post with ownerId 'user123'.
     * @deny (update) User with UID 'user456' cannot update a found item post owned by 'user123'.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /foundItems/{foundItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}
