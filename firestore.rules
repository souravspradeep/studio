rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the profile with ID 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to lost item posts created by a specific user.
     * @path /users/{userId}/lostItemPosts/{lostItemPostId}
     * @allow (create) User with ID 'user123' can create a lost item post in their own profile.
     * @deny (create) User with ID 'user456' cannot create a lost item post in user123's profile.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own lost item post.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the lost item post with ID 'lostItem123' in user123's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/lostItemPosts/{lostItemPostId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to found item posts.
     * @path /foundItemPosts/{foundItemPostId}
     * @allow (create, get, list) Any signed-in user can create, get, and list found item posts.
     * @deny (update, delete) Only the owner can update and delete, but the ownership is not defined in data model.
     * @principle Allows public read access and owner-only writes (owner validation to be implemented).
     */
    match /foundItemPosts/{foundItemPostId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to authority submissions.
     * @path /authoritySubmissions/{authoritySubmissionId}
     * @allow (create, get, list) Any signed-in user can create, get, and list authority submissions.
     * @deny (update, delete) Only the owner can update and delete, but the ownership is not defined in data model.
     * @principle Allows public read access and owner-only writes (owner validation to be implemented).
     */
    match /authoritySubmissions/{authoritySubmissionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to authority contacts.
     * @path /authorityContacts/{authorityContactId}
     * @allow (get, list) Any signed-in user can read and list authority contacts.
     * @deny (create, update, delete) Only admins can create, update, and delete authority contacts.
     * @principle Restricts write access to administrators (not yet implemented).
     */
    match /authorityContacts/{authorityContactId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Implement admin-only access
    }

        match /{path=**} {
            allow read, write: if false;
        }
  }
}