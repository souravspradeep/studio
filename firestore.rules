/**
 * @fileoverview Firestore Security Rules for the Lost and Found App.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a public-read, owner-write model for items.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, secured with owner-only access.
 * - /lostItems/{lostItemId}: Stores lost item posts, publicly readable but owner-controlled for modifications.
 * - /foundItems/{foundItemId}: Stores found item posts, publicly readable but owner-controlled for modifications.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Listing of users is disallowed.
 * - Items are publicly listable but can only be created, updated, or deleted by their respective owners.
 *
 * Denormalization for Authorization:
 * - Items store the `ownerId` directly on the document to enable efficient owner-based security checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the owner can read and write their own data.
     * @path /users/{userId}
     * @allow (create, update, delete, get) - User 'abc' can create, update, delete, and get their own profile at /users/abc if authenticated as user 'abc'.
     * @deny (create, update, delete, get) - User 'def' cannot create, update, delete, or get user 'abc's profile at /users/abc if authenticated as user 'def'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and is the owner of the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // No listing of users.
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to lost items, allowing public reads and owner-only writes.
     * @path /lostItems/{lostItemId}
     * @allow (get, list) - Any user can read lost items.
     * @allow (create) - User 'abc' can create a lost item with ownerId 'abc'.
     * @allow (update, delete) - User 'abc' can update/delete their lost item if authenticated as user 'abc' and the item exists.
     * @deny (create) - User 'abc' cannot create a lost item with ownerId 'def'.
     * @deny (update, delete) - User 'def' cannot update/delete a lost item owned by 'abc'.
     * @principle Public read, owner-only write.
     */
    match /lostItems/{lostItemId} {
        // Helper function to check if the user is signed in and is the owner of the resource.
        function isOwner(ownerId) {
          return request.auth != null && request.auth.uid == ownerId;
        }

        // Helper function to check if the user is signed in.
        function isSignedIn() {
          return request.auth != null;
        }

        function isExistingOwner(ownerId) {
            return isOwner(ownerId) && resource != null;
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.ownerId);
        allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to found items, allowing public reads and owner-only writes.
     * @path /foundItems/{foundItemId}
     * @allow (get, list) - Any user can read found items.
     * @allow (create) - User 'abc' can create a found item with ownerId 'abc'.
     * @allow (update, delete) - User 'abc' can update/delete their found item if authenticated as user 'abc' and the item exists.
     * @deny (create) - User 'abc' cannot create a found item with ownerId 'def'.
     * @deny (update, delete) - User 'def' cannot update/delete a found item owned by 'abc'.
     * @principle Public read, owner-only write.
     */
     match /foundItems/{foundItemId} {
        // Helper function to check if the user is signed in and is the owner of the resource.
        function isOwner(ownerId) {
          return request.auth != null && request.auth.uid == ownerId;
        }

        // Helper function to check if the user is signed in.
        function isSignedIn() {
          return request.auth != null;
        }

        function isExistingOwner(ownerId) {
            return isOwner(ownerId) && resource != null;
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.ownerId);
        allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}