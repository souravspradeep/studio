/**
 * @fileOverview
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated lost item posts.
 * Found item posts and authority submissions are publicly writeable, but access to authority contacts is restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own data.
 * - /users/{userId}/lostItemPosts/{lostItemPostId}: Stores lost item posts created by a specific user. Only the user can read/write their own posts.
 * - /foundItemPosts/{foundItemPostId}: Stores found item posts. Anyone can create posts. Only the user who created the post can update or delete.
 * - /authoritySubmissions/{authoritySubmissionId}: Stores submissions to the campus authority. Anyone can create posts.
 * - /authorityContacts/{authorityContactId}: Stores contact information for campus authorities.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Found item posts are publicly readable, but updates/deletes are owner-controlled.
 * - Authority submissions are publicly writeable.
 * - Authority contacts are publicly readable, but updates/deletes are owner-controlled.
 *
 * Denormalization for Authorization:
 * - The `LostItemPost` and `FoundItemPost` entities include a `userId` field to enable listing posts by a given user and simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User 'test_user' with auth.uid == 'test_user' can create their profile.
     * @allow (get, update, delete) User 'test_user' with auth.uid == 'test_user' can read/update/delete their profile.
     * @deny (create, get, update, delete) User 'other_user' with auth.uid != 'test_user' cannot access 'test_user' profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to lost item posts created by a specific user.
     * @path /users/{userId}/lostItemPosts/{lostItemPostId}
     * @allow (create) User 'test_user' with auth.uid == 'test_user' can create a lost item post.
     * @allow (get, list, update, delete) User 'test_user' with auth.uid == 'test_user' can read/list/update/delete their own lost item posts.
     * @deny (create, get, list, update, delete) User 'other_user' with auth.uid != 'test_user' cannot access 'test_user' lost item posts.
     * @principle Enforces document ownership for writes and reads within a user's data tree.
     */
    match /users/{userId}/lostItemPosts/{lostItemPostId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to found item posts.
     * @path /foundItemPosts/{foundItemPostId}
     * @allow (get, list) Anyone can read/list found item posts.
     * @allow (create) Any signed-in user can create a found item post.
     * @allow (update, delete) Only the user who created the post can update or delete it.
     * @deny (update, delete) If not signed in, cannot update/delete.
     * @principle Allows public read access with owner-only writes.
     */
    match /foundItemPosts/{foundItemPostId} {
      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Controls access to authority submissions.
     * @path /authoritySubmissions/{authoritySubmissionId}
     * @allow (get, list) Anyone can read/list authority submissions.
     * @allow (create) Any signed-in user can create an authority submission.
     * @deny (update, delete) No update/delete allowed on AuthoritySubmissions.
     * @principle Allows public read access and signed in create access. No updates or deletes allowed.
     */
    match /authoritySubmissions/{authoritySubmissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

     /**
      * @description Controls access to contact information for campus authorities.
      * @path /authorityContacts/{authorityContactId}
      * @allow (get, list) Anyone can read/list authority contacts.
      * @deny (create, update, delete) No one can create, update or delete AuthorityContacts. This would likely be managed by admins.
      */
    match /authorityContacts/{authorityContactId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}