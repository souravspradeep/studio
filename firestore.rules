/**
 * @fileOverview Firestore Security Rules for Campus Compass.
 *
 * Core Philosophy:
 * This ruleset prioritizes a strict user-ownership model for personal data (users and their lost item posts)
 * while allowing public read access to found item posts and authority submissions.
 * User data is secured under /users/{userId}, ensuring only the authenticated user can access their profile.
 * Lost item posts are nested under the corresponding user, inheriting the user-ownership security.
 * Found item posts and authority submissions are stored in top-level collections, enabling public listing
 * and creation, but with owner-only control for updates and deletes.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/lostItemPosts/{lostItemPostId}: Stores lost item posts created by a specific user.
 * - /foundItemPosts/{foundItemPostId}: Stores found item posts.
 * - /authoritySubmissions/{authoritySubmissionId}: Stores submissions to the campus authority.
 * - /authorityContacts/{authorityContactId}: Stores contact information for campus authorities.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Lost item posts inherit the ownership of their parent user.
 * - Found item posts and authority submissions are publicly readable but only updatable/deletable by their creator.
 * - Authority contacts are likely managed by admins (rules not yet implemented).
 *
 * Denormalization for Authorization:
 * - The `userId` field is included in both `LostItemPost` and `FoundItemPost` documents to enable efficient
 *   listing of posts by a given user without requiring additional `get()` calls.
 *
 * Structural Segregation:
 * - `lostItemPosts` and `foundItemPosts` are stored in separate collections to simplify security rules and
 *   optimize query performance based on their distinct access patterns.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user with matching userId can create their profile.
     * @allow (get, update, delete) Signed-in user with matching userId can read/write their profile.
     * @deny (create, update, delete) Signed-in user with non-matching userId cannot create/modify another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for lost item posts within a user's profile.
     * @path /users/{userId}/lostItemPosts/{lostItemPostId}
     * @allow (create) Signed-in user with matching userId can create a lost item post.
     * @allow (get, list, update, delete) Signed-in user with matching userId can read/write their own lost item posts.
     * @deny (create, update, delete) Signed-in user with non-matching userId cannot create/modify another user's lost item posts.
     * @principle Enforces document ownership and relational integrity.
     */
    match /users/{userId}/lostItemPosts/{lostItemPostId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to found item posts, but restricts writes to the owner.
     * @path /foundItemPosts/{foundItemPostId}
     * @allow (get, list) Anyone can read found item posts.
     * @allow (create) Signed-in user can create a found item post.
     * @deny (update, delete) Only the signed-in user that created the post can modify or delete it.
     * @principle Public read, owner-only write.
     */
    match /foundItemPosts/{foundItemPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    /**
     * @description Allows public read access to authority submissions, but restricts writes to the owner.
     * @path /authoritySubmissions/{authoritySubmissionId}
     * @allow (get, list) Anyone can read authority submissions.
     * @allow (create) Signed-in user can create an authority submission.
     * @deny (update, delete) Only the signed-in user that created the submission can modify or delete it.
     * @principle Public read, owner-only write.
     */
    match /authoritySubmissions/{authoritySubmissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    /**
     * @description Controls access to authority contact information.  Likely admin-only.
     * @path /authorityContacts/{authorityContactId}
     * @allow (get, list, create, update, delete) No access granted yet.  Requires admin role implementation.
     * @principle Placeholder for admin-controlled data.
     */
    match /authorityContacts/{authorityContactId} {
      allow get, list, create, update, delete: if false; // TODO: Implement admin role check.
    }
  }
}