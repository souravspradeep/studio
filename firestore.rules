/**
 * @fileoverview Firestore Security Rules for Campus Compass.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated lost item posts.
 * Found item posts and authority submissions are publicly readable and writable.
 * Authority contacts are writable by anyone.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/lostItemPosts/{lostItemPostId}: Stores lost item posts created by a specific user.
 * - /foundItemPosts/{foundItemPostId}: Stores found item posts.
 * - /authoritySubmissions/{authoritySubmissionId}: Stores submissions to the campus authority.
 * - /authorityContacts/{authorityContactId}: Stores contact information for campus authorities.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and lost item posts.
 * - Found item posts and authority submissions can be created by anyone.
 * - Listing of /users/{userId}/lostItemPosts/{lostItemPostId} is allowed only by the owner.
 * - Authority contacts can be read/written by anyone.
 *
 * Denormalization for Authorization:
 * - Each LostItemPost has a `userId` field matching the user who created it, enabling owner-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Manages user profile information. Only the user can read/write their own data.
     * @path: /users/{userId}
     * @allow: User with UID 'user123' can create their profile document with id 'user123'. (create)
     * @deny: User with UID 'user456' cannot create a profile document with id 'user123'. (create)
     * @principle: Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Users collection should not be listable

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description: Manages lost item posts created by a specific user.  Only the owning user can create, read, update, or delete.
     * @path: /users/{userId}/lostItemPosts/{lostItemPostId}
     * @allow: User with UID 'user123' can create a lost item post under their profile. (create)
     * @deny: User with UID 'user456' cannot create a lost item post under user 'user123'. (create)
     * @principle: Enforces document ownership and validates relational integrity.
     */
    match /users/{userId}/lostItemPosts/{lostItemPostId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description: Manages found item posts. Anyone can create found item posts.
     * @path: /foundItemPosts/{foundItemPostId}
     * @allow: Any authenticated user can create a found item post. (create)
     * @deny: N/A
     * @principle: Allows public reads and owner-only writes.
     */
    match /foundItemPosts/{foundItemPostId} {
      allow get: if true;
      allow list: if true;

      allow create: if request.auth != null;
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Manages submissions to the campus authority. Anyone can create authority submissions.
     * @path: /authoritySubmissions/{authoritySubmissionId}
     * @allow: Any authenticated user can create an authority submission. (create)
     * @deny: N/A
     * @principle: Allows public creation of submissions.
     */
    match /authoritySubmissions/{authoritySubmissionId} {
      allow get: if true;
      allow list: if true;

      allow create: if request.auth != null;
      allow update: if false; //No updates allowed
      allow delete: if false; // No deletes allowed
    }

    /**
     * @description: Manages contact information for campus authorities. Anyone can create and modify authority contacts.
     * @path: /authorityContacts/{authorityContactId}
     * @allow: Any authenticated user can create/update authority contacts. (create, update)
     * @deny: N/A
     * @principle: Allows public management of authority contacts (potentially for admin use).
     */
    match /authorityContacts/{authorityContactId} {
      allow get: if true;
      allow list: if true;

      allow create: if request.auth != null;
      allow update: if request.auth != null && resource != null;
      allow delete: if false; // Nobody can delete
    }
  }
}