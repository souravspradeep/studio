/**
 * @file Firestore Security Rules for Campus Compass
 * @Core Philosophy: This ruleset enforces a combination of user-ownership and public-read with owner-write access patterns,
 * ensuring data is primarily controlled by its creator while allowing for public discoverability where appropriate.
 * @Data Structure: The database is organized around users and their lost item posts, with separate top-level collections
 * for found item posts and authority submissions. User profiles are stored under `/users/{userId}`.
 * @Key Security Decisions:
 *   - Users can only read/write their own profile data.
 *   - Users own the lost item posts they create under their profile.
 *   - Found item posts and authority submissions are publicly readable but writable by any authenticated user.
 *   - Authority contacts are writable by anyone. Consider restricting this in a production environment.
 * @Denormalization for Authorization: The `LostItemPost` includes a `userId` field to simplify ownership checks
 * within the `/users/{userId}/lostItemPosts/{lostItemPostId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - A user can read, update, and delete their own profile.
     * @deny (create) - A user cannot create a profile with a userId that doesn't match their auth.uid.
     * @deny (get, update, delete) - A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Users collection is not listable.

      allow create: if isSignedIn() && isOwner(userId); // New documents must have matching user ID
      allow update: if isSignedIn() && isOwner(userId); // Immutable userId
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to lost item posts created by a specific user.
     * @path /users/{userId}/lostItemPosts/{lostItemPostId}
     * @allow (create) - A user can create a lost item post under their profile.
     * @allow (get, list, update, delete) - A user can read, list, update, and delete their own lost item posts.
     * @deny (create) - A user cannot create a lost item post under another user's profile.
     * @deny (get, list, update, delete) - A user cannot read, list, update, or delete another user's lost item posts.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/lostItemPosts/{lostItemPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to found item posts.
     * @path /foundItemPosts/{foundItemPostId}
     * @allow (get, list) - Anyone can read/list found item posts.
     * @allow (create) - Any authenticated user can create a found item post.
     * @deny (update, delete) - Only the owner can update/delete found item posts.
     * @principle Public read, owner-only write.
     */
    match /foundItemPosts/{foundItemPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(resource) {
        return resource.data.userId == request.auth.uid;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource);
      allow delete: if isSignedIn() && isOwner(resource);
    }

    /**
     * @description Controls access to authority submissions.
     * @path /authoritySubmissions/{authoritySubmissionId}
     * @allow (get, list) - Anyone can read/list authority submissions.
     * @allow (create) - Any authenticated user can create an authority submission.
     * @deny (update, delete) - No one can update or delete an authority submission.
     * @principle Public read, open write.
     */
    match /authoritySubmissions/{authoritySubmissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to authority contacts.
     * @path /authorityContacts/{authorityContactId}
     * @allow (get, list, create, update, delete) - Any authenticated user can read, list, create, update, and delete authority contacts.
     * @principle Open access (consider restricting in production).
     */
    match /authorityContacts/{authorityContactId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}