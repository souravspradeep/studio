/**
 * @fileOverview Firestore Security Rules for Campus Compass.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read with owner-write access patterns, tailored to the specific data collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their profile data.
 * - /users/{userId}/lostItemPosts/{lostItemPostId}: Stores lost item posts created by a specific user. Only the owner user can manage their lost item posts.
 * - /foundItemPosts/{foundItemPostId}: Stores found item posts. Any authenticated user can create found item posts. Only the owner can edit and delete.
 * - /authoritySubmissions/{authoritySubmissionId}: Stores submissions to campus authorities.  Any authenticated user can create a submission. Only the owner can edit and delete.
 * - /authorityContacts/{authorityContactId}: Stores contact info for campus authorities. Write access is denied to all users for prototyping.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Authority Contacts are read-only for all users in this prototype.
 * - Public read access is granted to the /foundItemPosts collection, but write access is restricted to the owner.
 *
 * Denormalization for Authorization:
 * - The 'userId' field is used within the LostItemPost and FoundItemPost documents to indicate ownership. This avoids complex queries and enforces a simple ownership model.
 *
 * Structural Segregation:
 * - Separate collections are used for lost and found items to simplify security rules and query optimization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if the request is made by the user with ID {userId}.
     * @allow (create) if the authenticated user's ID matches the {userId} in the path.
     * @deny (get, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Validate that userId matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure lost item posts under a user's profile. Only the owner can manage these posts.
     * @path /users/{userId}/lostItemPosts/{lostItemPostId}
     * @allow (create) if the authenticated user is the owner (userId in path matches auth.uid).
     * @allow (get, list, update, delete) if the authenticated user is the owner.
     * @deny (create, get, list, update, delete) if the authenticated user is not the owner.
     * @principle Enforces document ownership; a user can only manage their own lost item posts.
     */
    match /users/{userId}/lostItemPosts/{lostItemPostId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure found item posts.
     * @path /foundItemPosts/{foundItemPostId}
     * @allow (get, list) to anyone.
     * @allow (create) if the request is authenticated and the userId matches the authenticated user.
     * @allow (update, delete) if the request is authenticated and the userId of the existing document matches the authenticated user.
     * @deny (create, update, delete) if the user is not authenticated or does not own the post.
     * @principle Allows public read access while enforcing owner-only write access.
     */
    match /foundItemPosts/{foundItemPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      //isExistingOwner checks if document exist before applying ownership.
      function isExistingOwner(){
          return isSignedIn() && request.auth.uid == resource.data.userId;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Secure authority submissions.
     * @path /authoritySubmissions/{authoritySubmissionId}
     * @allow (create) if the request is authenticated.
     * @allow (get, list) to anyone.
     * @allow (update, delete) if the request is authenticated and the submission was created by the requesting user.
     * @deny (update, delete) if the submission does not exist or was created by another user.
     * @principle Allows authenticated users to submit to authorities and manage their own submissions.
     */
    match /authoritySubmissions/{authoritySubmissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      //isOwner checks if resource.data.userId (existing documents userId) matches current user.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //isExistingOwner checks if document exist before applying ownership.
      function isExistingOwner(){
          return isSignedIn() && request.auth.uid == resource.data.userId;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Secure authority contacts.  Write access is denied to all users for prototyping.
     * @path /authorityContacts/{authorityContactId}
     * @deny (create, get, list, update, delete) to all users.
     * @principle Restricts access to authority contact information for prototyping purposes.
     */
    match /authorityContacts/{authorityContactId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}