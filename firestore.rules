/**
 * @fileoverview Firestore Security Rules for Lost and Found App
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection and access control.
 * Users can only read and write their own profile data. Lost and found items are publicly readable,
 * but only the owner can modify or delete their own posts.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Access is restricted to the user themselves.
 * - /lostItems/{lostItemId}: Stores lost item posts. Accessible for public reads.
 * - /foundItems/{foundItemId}: Stores found item posts. Accessible for public reads.
 *
 * Key Security Decisions:
 * - Users cannot list all users.
 * - Ownership of Items is verified against the 'ownerId' field in the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can create their own profile.
     * @allow (get, update, delete) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can access their own profile.
     * @deny (create) User abc cannot create a profile with ID jVOeXpzxIbfTfFhEX5s6uyARuEu1.
     * @deny (get, update, delete) User abc cannot access User jVOeXpzxIbfTfFhEX5s6uyARuEu1's profile.
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Id must be immutable on update
      allow list: if false;
    }

    /**
     * @description Rules for the /lostItems/{lostItemId} collection.
     * @path /lostItems/{lostItemId}
     * @allow (get, list) Anyone can read lost items.
     * @allow (create) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can create a lost item if they are the owner.
     * @allow (update, delete) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can update or delete their own lost item.
     * @deny (create) User abc cannot create a lost item for User jVOeXpzxIbfTfFhEX5s6uyARuEu1.
     * @deny (update, delete) User abc cannot update or delete User jVOeXpzxIbfTfFhEX5s6uyARuEu1's lost item.
     * @principle Allows public reads, but enforces document ownership for writes.
     */
    match /lostItems/{lostItemId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.ownerId);
    }

       /**
     * @description Rules for the /foundItems/{foundItemId} collection.
     * @path /foundItems/{foundItemId}
     * @allow (get, list) Anyone can read found items.
     * @allow (create) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can create a found item if they are the owner.
     * @allow (update, delete) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can update or delete their own found item.
     * @deny (create) User abc cannot create a found item for User jVOeXpzxIbfTfFhEX5s6uyARuEu1.
     * @deny (update, delete) User abc cannot update or delete User jVOeXpzxIbfTfFhEX5s6uyARuEu1's found item.
     * @principle Allows public reads, but enforces document ownership for writes.
     */
    match /foundItems/{foundItemId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}