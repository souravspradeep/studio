/**
 * @fileoverview Firestore Security Rules for the "Lost and Found" application.
 *
 * Core Philosophy:
 * This ruleset prioritizes data ownership and prevents unauthorized access.
 * Users can only create, read, update, and delete their own data.
 * Public read access is granted to the `lostItems` and `foundItems` collections to support discovery of items.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Access is restricted to the owning user.
 * - /lostItems/{lostItemId}: Stores lost item posts. Publicly readable, owner-only writes.
 * - /foundItems/{foundItemId}: Stores found item posts. Publicly readable, owner-only writes.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Read-only collections are handled with public `get` and `list` permissions.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 * - Both `lostItems` and `foundItems` require an `ownerId` field on each document.
 *   This is essential to quickly verify ownership for update and delete operations.
 *
 * Structural Segregation:
 * - The application uses top-level collections for public posts (`lostItems`, `foundItems`)
 *   and a user subcollection for private user data (`/users/{userId}`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     *  This helper function is used for update and delete operations, and protects against
     *  attempts to modify or delete non-existent documents.
     */
    function isExistingOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }


    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their own user document.
     * @allow (get) User 'user_abc' can read their own user document.
     * @deny (get) User 'user_xyz' cannot read User 'user_abc' document.
     * @principle Enforces document ownership for all operations on user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rules for the /lostItems/{lostItemId} collection.
      * @path /lostItems/{lostItemId}
      * @allow (get) Any user can read a lost item.
      * @allow (list) Any user can list lost items.
      * @allow (create) User 'user_abc' can create a lost item with their ownerId.
      * @deny (update) User 'user_xyz' cannot update a lost item owned by 'user_abc'.
      * @principle Allows public read access but restricts writes to the owner.
      */
    match /lostItems/{lostItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for the /foundItems/{foundItemId} collection.
     * @path /foundItems/{foundItemId}
     * @allow (get) Any user can read a found item.
     * @allow (list) Any user can list found items.
     * @allow (create) User 'user_abc' can create a found item with their ownerId.
     * @deny (update) User 'user_xyz' cannot update a found item owned by 'user_abc'.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /foundItems/{foundItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}