rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner-only access to user profiles.
     * @path /users/{userId}
     * @allow (create) User(id=request.auth.uid) can create their profile.
     * @allow (get, list, update, delete) User(id=auth.uid) can read/write their own profile.
     * @deny (create, get, list, update, delete) User(id!=auth.uid) cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants owner-only access to lost item posts within a user's profile.
     * @path /users/{userId}/lostItemPosts/{lostItemPostId}
     * @allow (create) User(id=auth.uid) can create a lost item post under their profile.
     * @allow (get, list, update, delete) User(id=auth.uid) can read/write their own lost item posts.
     * @deny (create, get, list, update, delete) User(id!=auth.uid) cannot access another user's lost item posts.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/lostItemPosts/{lostItemPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants public read access and owner-only write access to found item posts.
     * @path /foundItemPosts/{foundItemPostId}
     * @allow (get, list) Anyone can read found item posts.
     * @allow (create) User(id=auth.uid) can create a found item post with their ID as the owner.
     * @allow (update, delete) User(id=auth.uid) can modify/delete their own found item posts.
     * @deny (create) User(id=auth.uid) cannot create a post with a mismatched owner ID.
     * @deny (update, delete) User(id!=auth.uid) cannot modify/delete another user's found item posts.
     * @principle Enforces document ownership for writes while allowing public reads.
     */
    match /foundItemPosts/{foundItemPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Grants public read and write access to authority submissions.
     * @path /authoritySubmissions/{authoritySubmissionId}
     * @allow (get, list, create, update, delete) Anyone can read and write authority submissions.
     * @principle Provides completely open access to this collection.
     */
    match /authoritySubmissions/{authoritySubmissionId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Grants public read and write access to authority contacts.
     * @path /authorityContacts/{authorityContactId}
     * @allow (get, list, create, update, delete) Anyone can read and write authority contacts.
     * @principle Provides completely open access to this collection.
     */
    match /authorityContacts/{authorityContactId} {
      allow get, list, create, update, delete: if true;
    }
  }
}