rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create, update, delete) if the user is the owner (userId matches auth.uid).
     * @allow (get) if the user is the owner (userId matches auth.uid).
     * @deny (create) if the userId does not match auth.uid.
     * @deny (update, delete) if the user is not the owner (userId does not match auth.uid).
     * @deny (list) to prevent listing all users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to lost item posts for a specific user.
     * @path /users/{userId}/lostItemPosts/{lostItemPostId}
     * @allow (create, update, delete) if the user is the owner (userId matches auth.uid).
     * @allow (get, list) if the user is the owner (userId matches auth.uid).
     * @deny (create) if the userId does not match auth.uid or the post does not belong to the user.
     * @deny (update, delete) if the user is not the owner (userId does not match auth.uid).
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/lostItemPosts/{lostItemPostId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to found item posts.
     * @path /foundItemPosts/{foundItemPostId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) if the user is signed in.
     * @deny (create) if the user is not signed in.
     * @deny (update, delete) if the user is not the owner (owner is the user that created the post).
     * @principle Allows public read access but requires authentication for writes.
     */
    match /foundItemPosts/{foundItemPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to authority submissions.
     * @path /authoritySubmissions/{authoritySubmissionId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) if the user is signed in.
     * @deny (create) if the user is not signed in.
     * @principle Allows public read access but requires authentication for writes.
     */
    match /authoritySubmissions/{authoritySubmissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to authority contacts.
     * @path /authorityContacts/{authorityContactId}
     * @deny (get, list, create, update, delete) to everyone.
     * @principle Placeholder rules for future implementation of admin-only access.
     */
    match /authorityContacts/{authorityContactId} {
      allow get, list, create, update, delete: if false; // TODO: Implement admin-only access.
    }
  }
}