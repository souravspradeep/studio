/**
 * @fileoverview Firestore Security Rules for Lost and Found App.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access with owner-only writes for lost and found items.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /lostItems/{lostItemId}: Stores lost item posts, publicly readable but only editable by the owner.
 * - /foundItems/{foundItemId}: Stores found item posts, publicly readable but only editable by the owner.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed.
 * - Lost and found items are publicly readable to encourage community participation.
 * - Only the owner of a lost or found item can modify or delete it.
 *
 * Denormalization for Authorization:
 * The 'Item' entity includes an 'ownerId' field to simplify authorization checks for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      //Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Function to check if the user owns the resource
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Defines security rules for lost items. Allows public reads, but restricts writes to the owner.
     * @path /lostItems/{lostItemId}
     * @allow (get) Any user can read a lost item.
     * @allow (list) Any user can list lost items.
     * @allow (create) User with ID 'user123' can create a lost item with ownerId 'user123'.
     * @allow (update) User with ID 'user123' can update a lost item they own.
     * @allow (delete) User with ID 'user123' can delete a lost item they own.
     * @deny (create) User with ID 'user456' cannot create a lost item with ownerId 'user123'.
     * @deny (update) User with ID 'user456' cannot update a lost item owned by 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a lost item owned by 'user123'.
     * @principle Allows public read access but enforces document ownership for writes.
     */
    match /lostItems/{lostItemId} {
      //Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Function to check if the user owns the resource
      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

     /**
     * @description Defines security rules for found items. Allows public reads, but restricts writes to the owner.
     * @path /foundItems/{foundItemId}
     * @allow (get) Any user can read a found item.
     * @allow (list) Any user can list found items.
     * @allow (create) User with ID 'user123' can create a found item with ownerId 'user123'.
     * @allow (update) User with ID 'user123' can update a found item they own.
     * @allow (delete) User with ID 'user123' can delete a found item they own.
     * @deny (create) User with ID 'user456' cannot create a found item with ownerId 'user123'.
     * @deny (update) User with ID 'user456' cannot update a found item owned by 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a found item owned by 'user123'.
     * @principle Allows public read access but enforces document ownership for writes.
     */
    match /foundItems/{foundItemId} {
      //Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Function to check if the user owns the resource
      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }
  }
}