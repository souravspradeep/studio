/**
 * @fileOverview This ruleset enforces a user-ownership model for user profiles and their lost item posts,
 *   allows public read/write access to found item posts and authority submissions,
 *   and restricts access to authority contact information.
 *
 * @dataStructure
 *   - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 *   - /users/{userId}/lostItemPosts/{lostItemPostId}: Stores lost item posts created by a specific user, accessible only to that user.
 *   - /foundItemPosts/{foundItemPostId}: Stores found item posts, publicly accessible.
 *   - /authoritySubmissions/{authoritySubmissionId}: Stores submissions to the campus authority, publicly accessible.
 *   - /authorityContacts/{authorityContactId}: Stores contact information for campus authorities, write-protected.
 *
 * @keySecurityDecisions
 *   - Users can only read and write their own profile data and lost item posts.
 *   - Found item posts and authority submissions are publicly accessible.
 *   - Authority contact information is read and write-protected, simulating admin-only access for prototyping.
 *   - User listing is disabled for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information. Only the user can read/write their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get) - User with UID 'user_abc' can read their profile at /users/user_abc.
     * @allow (update) - User with UID 'user_abc' can update their profile at /users/user_abc.
     * @allow (delete) - User with UID 'user_abc' can delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get) - User with UID 'user_xyz' cannot read the profile at /users/user_abc.
     * @deny (update) - User with UID 'user_xyz' cannot update the profile at /users/user_abc.
     * @deny (delete) - User with UID 'user_xyz' cannot delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Stores lost item posts created by a specific user. Only the user can manage their own posts.
     * @path /users/{userId}/lostItemPosts/{lostItemPostId}
     * @allow (create) - User with UID 'user_abc' can create a lost item post under /users/user_abc/lostItemPosts/post1.
     * @allow (get) - User with UID 'user_abc' can read a lost item post under /users/user_abc/lostItemPosts/post1.
     * @allow (update) - User with UID 'user_abc' can update a lost item post under /users/user_abc/lostItemPosts/post1.
     * @allow (delete) - User with UID 'user_abc' can delete a lost item post under /users/user_abc/lostItemPosts/post1.
     * @deny (create) - User with UID 'user_xyz' cannot create a lost item post under /users/user_abc/lostItemPosts/post1.
     * @deny (get) - User with UID 'user_xyz' cannot read a lost item post under /users/user_abc/lostItemPosts/post1.
     * @deny (update) - User with UID 'user_xyz' cannot update a lost item post under /users/user_abc/lostItemPosts/post1.
     * @deny (delete) - User with UID 'user_xyz' cannot delete a lost item post under /users/user_abc/lostItemPosts/post1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/lostItemPosts/{lostItemPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Stores found item posts. Anyone can create, read, update and delete.
     * @path /foundItemPosts/{foundItemPostId}
     * @allow (create) - Any authenticated user can create a found item post.
     * @allow (get) - Any authenticated user can read a found item post.
     * @allow (update) - Any authenticated user can update a found item post.
     * @allow (delete) - Any authenticated user can delete a found item post.
     * @principle Allows public read/write access for prototyping.
     */
    match /foundItemPosts/{foundItemPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Stores submissions to the campus authority. Anyone can create, read, update and delete.
     * @path /authoritySubmissions/{authoritySubmissionId}
     * @allow (create) - Any authenticated user can create an authority submission.
     * @allow (get) - Any authenticated user can read an authority submission.
     * @allow (update) - Any authenticated user can update an authority submission.
     * @allow (delete) - Any authenticated user can delete an authority submission.
     * @principle Allows public read/write access for prototyping.
     */
    match /authoritySubmissions/{authoritySubmissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Stores contact information for campus authorities. Read-protected and write-protected to simulate admin-only access.
     * @path /authorityContacts/{authorityContactId}
     * @deny (create) - No one can create authority contacts.
     * @deny (get) - No one can read authority contacts.
     * @deny (update) - No one can update authority contacts.
     * @deny (delete) - No one can delete authority contacts.
     * @principle Restricts access to simulate admin-only access.
     */
    match /authorityContacts/{authorityContactId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}