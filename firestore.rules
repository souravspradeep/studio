/**
 * @fileoverview Firestore Security Rules for Campus Compass.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and lost item posts,
 * and allows public read access to found item posts and authority submissions.
 * Administrative access is assumed to be handled outside of Firestore.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information; only the user can read/write.
 * - /users/{userId}/lostItemPosts/{lostItemPostId}: Stores lost item posts; only the user can read/write.
 * - /foundItemPosts/{foundItemPostId}: Stores found item posts; publicly readable.
 * - /authoritySubmissions/{authoritySubmissionId}: Stores submissions to authorities; publicly readable.
 * - /authorityContacts/{authorityContactId}: Stores authority contact information.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents and lost item posts.
 * - Found item posts and authority submissions are publicly readable to facilitate discovery and reporting.
 * - The ruleset trusts client-provided data and does not perform schema validation beyond ownership checks.
 * - Listing all users or authority contacts is disallowed by default for privacy and security.
 *
 * Denormalization for Authorization:
 * The `lostItemPosts` subcollection under `/users/{userId}` automatically links a post to its owner,
 * eliminating the need for `get()` calls to determine ownership.
 *
 * Structural Segregation:
 * `lostItemPosts` are stored as a user subcollection, while `foundItemPosts` are stored in a top-level collection.
 * This avoids the need for a boolean flag (e.g., `isLost`) and allows for simpler, more performant rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User 'vW9DPfBghQgkhuIXRq43YtljtHk1' can create their own profile at /users/vW9DPfBghQgkhuIXRq43YtljtHk1.
     * @allow (get, update, delete) User 'vW9DPfBghQgkhuIXRq43YtljtHk1' can read/update/delete their own profile at /users/vW9DPfBghQgkhuIXRq43YtljtHk1.
     * @deny (create) User 'someOtherUserId' cannot create a profile for 'vW9DPfBghQgkhuIXRq43YtljtHk1' at /users/vW9DPfBghQgkhuIXRq43YtljtHk1.
     * @deny (get, update, delete) User 'someOtherUserId' cannot read/update/delete the profile of 'vW9DPfBghQgkhuIXRq43YtljtHk1' at /users/vW9DPfBghQgkhuIXRq43YtljtHk1.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to lost item posts created by a specific user.
     * @path /users/{userId}/lostItemPosts/{lostItemPostId}
     * @allow (create) User 'vW9DPfBghQgkhuIXRq43YtljtHk1' can create a lost item post under their own profile.
     * @allow (get, update, delete) User 'vW9DPfBghQgkhuIXRq43YtljtHk1' can read/update/delete their own lost item post.
     * @deny (create) User 'someOtherUserId' cannot create a lost item post for 'vW9DPfBghQgkhuIXRq43YtljtHk1'.
     * @deny (get, update, delete) User 'someOtherUserId' cannot read/update/delete the lost item post of 'vW9DPfBghQgkhuIXRq43YtljtHk1'.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId}/lostItemPosts/{lostItemPostId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to found item posts.
     * @path /foundItemPosts/{foundItemPostId}
     * @allow (get, list) Any user can read found item posts.
     * @allow (create) Any authenticated user can create found item posts.
     * @deny (update, delete) Only the owner can update/delete found item posts.
     * @principle Allows public read access; enforces document ownership for writes.
     */
    match /foundItemPosts/{foundItemPostId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to authority submissions.
     * @path /authoritySubmissions/{authoritySubmissionId}
     * @allow (get, list) Any user can read authority submissions.
     * @allow (create) Any authenticated user can create authority submissions.
     * @deny (update, delete) Only the owner can update/delete authority submissions.
     * @principle Allows public read access; enforces document ownership for writes.
     */
    match /authoritySubmissions/{authoritySubmissionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to authority contacts.
     * @path /authorityContacts/{authorityContactId}
     * @allow (get) Any user can read authority contacts.
     * @deny (list) Listing all authority contacts is prohibited.
     * @deny (create, update, delete) Authority contact management is assumed to be handled by admins (outside of Firestore rules).
     * @principle Restricts access to a user's own data tree; administrator management.
     */
    match /authorityContacts/{authorityContactId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

  }

  function isSignedIn() {
    return request.auth != null;
  }
}