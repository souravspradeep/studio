/**
 * @fileOverview Firestore Security Rules for Campus Compass.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and lost item posts,
 * allowing each user to manage their own data. Found item posts and authority submissions
 * are publicly writable but should include the user ID of the creator for auditing.
 * Authority contacts are assumed to be managed by admins (currently not implemented).
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user themselves.
 * - /users/{userId}/lostItemPosts/{lostItemPostId}: Lost item posts created by a specific user, accessible only by that user.
 * - /foundItemPosts/{foundItemPostId}: Found item posts, publicly readable, but owner-writeable.
 * - /authoritySubmissions/{authoritySubmissionId}: Submissions to the campus authority, publicly readable, but owner-writeable.
 * - /authorityContacts/{authorityContactId}: Contact information for campus authorities (admin-managed, rules not implemented).
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Authority contact management is not implemented in this ruleset.  Rules are a placeholder.
 * - Public read access is granted to found item posts and authority submissions.
 * - All write operations require a verified user identity.
 *
 * Denormalization for Authorization:
 * - `userId` is included in both `LostItemPost` and `FoundItemPost` documents to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile.
     *    request.auth.uid == 'user123' && request.resource.data.id == 'user123'
     * @allow (get, update, delete) - User with ID 'user123' can read/update/delete their profile.
     *    request.auth.uid == 'user123' && resource.data.id == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     *    request.auth.uid == 'user456' && request.resource.data.id == 'user123'
     * @deny (update, delete) - User with ID 'user456' cannot update/delete the profile of 'user123'.
     *    request.auth.uid == 'user456' && resource.data.id == 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to lost item posts created by a specific user.
     * @path /users/{userId}/lostItemPosts/{lostItemPostId}
     * @allow (create) - User with ID 'user123' can create a lost item post under their profile.
     *    request.auth.uid == 'user123'
     * @allow (get, list, update, delete) - User with ID 'user123' can read/list/update/delete their lost item posts.
     *    request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' cannot create a lost item post under 'user123's profile.
     *    request.auth.uid == 'user456'
     * @deny (update, delete) - User with ID 'user456' cannot update/delete a lost item post of 'user123'.
     *    request.auth.uid == 'user456'
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/lostItemPosts/{lostItemPostId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to found item posts.
     * @path /foundItemPosts/{foundItemPostId}
     * @allow (get, list) - Anyone can read or list found item posts.
     * @allow (create) - Any authenticated user can create a found item post.  Must set userId on create.
     * @allow (update, delete) - Only the user who created the post can update or delete it.
     * @deny (update, delete) - User with ID 'user456' cannot update/delete a found item post of 'user123'.
     *    request.auth.uid == 'user456' && resource.data.userId == 'user123'
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /foundItemPosts/{foundItemPostId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to authority submissions.
     * @path /authoritySubmissions/{authoritySubmissionId}
     * @allow (get, list) - Anyone can read or list authority submissions.
     * @allow (create) - Any authenticated user can create an authority submission.
     * @allow (update, delete) - Only the user who created the submission can update or delete it.
     * @deny (update, delete) - User with ID 'user456' cannot update/delete an authority submission of 'user123'.
     *    request.auth.uid == 'user456' && resource.data.userId == 'user123'
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /authoritySubmissions/{authoritySubmissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to authority contacts.  Placeholder rules.  Admin-only access to be implemented.
     * @path /authorityContacts/{authorityContactId}
     * @allow (get, list) - No access granted.
     * @allow (create, update, delete) - No access granted.
     * @principle Placeholder for admin-only access.
     */
    match /authorityContacts/{authorityContactId} {
      allow get, list, create, update, delete: if false; // TODO: Implement admin-only access
    }
  }
}