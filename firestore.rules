/**
 * @fileoverview Firestore Security Rules for Lost & Found App
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model where users can only
 * read and write their own profile data. Lost and found items are publicly
 * readable but can only be created, updated, or deleted by their respective owners.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the
 *   authenticated user with the matching userId.
 * - /lostItems/{lostItemId}: Stores lost item posts. Publicly readable, but
 *   write access is restricted to the owner of the item.
 * - /foundItems/{foundItemId}: Stores found item posts. Publicly readable, but
 *   write access is restricted to the owner of the item.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Data types and full schema validation are skipped in prototyping mode to allow rapid iteration.
 *
 * Denormalization for Authorization:
 * - The `Item` documents in both `/lostItems` and `/foundItems` collections
 *   contain an `ownerId` field. This denormalization is crucial to avoid
 *   costly `get()` calls in the security rules when checking ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get) Signed-in user can read their own profile.
     * @allow (create) Signed-in user can create their own profile, with matching id.
     * @allow (update) Signed-in user can update their own profile.
     * @allow (delete) Signed-in user can delete their own profile.
     * @deny (get) Signed-in user cannot read another user's profile.
     * @deny (list) User listing is not allowed.
     * @deny (create) Cannot create a profile with a mismatched user ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Verify ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to lost item posts.
     * @path /lostItems/{lostItemId}
     * @allow (get, list) Anyone can read or list lost item posts.
     * @allow (create) Signed-in user can create a lost item post with a matching ownerId.
     * @allow (update) Owner can update their own lost item post.
     * @allow (delete) Owner can delete their own lost item post.
     * @deny (create) Cannot create a lost item post with a mismatched ownerId.
     * @principle Allows public reads but enforces ownership for writes on lost item posts.
     */
    match /lostItems/{lostItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
          return isOwner(ownerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to found item posts.
     * @path /foundItems/{foundItemId}
     * @allow (get, list) Anyone can read or list found item posts.
     * @allow (create) Signed-in user can create a found item post with a matching ownerId.
     * @allow (update) Owner can update their own found item post.
     * @allow (delete) Owner can delete their own found item post.
     * @deny (create) Cannot create a found item post with a mismatched ownerId.
     * @principle Allows public reads but enforces ownership for writes on found item posts.
     */
    match /foundItems/{foundItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
          return isOwner(ownerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}