/**
 * @fileoverview Firestore Security Rules for Lost and Found App
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and prevents unauthorized access to user profiles and item postings. It leverages Firebase Authentication to verify user identity and enforces strict access controls based on user IDs.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles. Access is restricted to the owning user.
 * - `/lostItems/{lostItemId}`: Stores lost item postings. Publicly readable, but write access is limited to authenticated users.
 * - `/foundItems/{foundItemId}`: Stores found item postings. Publicly readable, but write access is limited to authenticated users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profiles. Listing all users is disallowed.
 * - Both `lostItems` and `foundItems` are readable by anyone, but creating, updating, or deleting an item requires authentication and ownership of the item.
 *
 * Denormalization for Authorization:
 * - The `Item` entity includes an `ownerId` field to simplify ownership checks for `lostItems` and `foundItems`. This avoids costly `get()` operations on other documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing resource.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can create their own user document.
     * @allow (get, update, delete) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can get, update, and delete their own user document.
     * @deny (create) User abc cannot create document for user jVOeXpzxIbfTfFhEX5s6uyARuEu1
     * @deny (get, update, delete) User abc cannot get, update, and delete document for user jVOeXpzxIbfTfFhEX5s6uyARuEu1
     * @principle Enforces user ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /lostItems/{lostItemId} documents.
     * @path /lostItems/{lostItemId}
     * @allow (get, list) Anyone can read lost items.
     * @allow (create) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can create a lost item if they are the owner.
     * @allow (update, delete) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can update/delete a lost item if they are the owner.
     * @deny (create) Anonymous user cannot create a lost item.
     * @deny (update, delete) User abc cannot update/delete a lost item owned by jVOeXpzxIbfTfFhEX5s6uyARuEu1.
     * @principle Allows public read access while enforcing owner-only writes.
     */
    match /lostItems/{lostItemId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

     /**
     * @description Rules for /foundItems/{foundItemId} documents.
     * @path /foundItems/{foundItemId}
     * @allow (get, list) Anyone can read found items.
     * @allow (create) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can create a found item if they are the owner.
     * @allow (update, delete) User jVOeXpzxIbfTfFhEX5s6uyARuEu1 can update/delete a found item if they are the owner.
     * @deny (create) Anonymous user cannot create a found item.
     * @deny (update, delete) User abc cannot update/delete a found item owned by jVOeXpzxIbfTfFhEX5s6uyARuEu1.
     * @principle Allows public read access while enforcing owner-only writes.
     */
    match /foundItems/{foundItemId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}